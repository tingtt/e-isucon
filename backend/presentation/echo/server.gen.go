// Package echo provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package echo

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// イベント一覧
	// (GET /events)
	GetEvents(ctx echo.Context, params GetEventsParams) error
	// イベント登録
	// (POST /events)
	PostEvents(ctx echo.Context) error
	// イベント削除
	// (DELETE /events/{id})
	DeleteEventsId(ctx echo.Context, id Id) error
	// イベント詳細
	// (GET /events/{id})
	GetEventsId(ctx echo.Context, id Id, params GetEventsIdParams) error
	// イベント情報変更
	// (PATCH /events/{id})
	PatchEventsId(ctx echo.Context, id Id) error
	// イベント資料一覧
	// (GET /events/{id}/documents)
	GetEventsIdDocuments(ctx echo.Context, id Id, params GetEventsIdDocumentsParams) error
	// イベント資料登録
	// (POST /events/{id}/documents)
	PostEventsIdDocuments(ctx echo.Context, id Id) error
	// イベント資料削除
	// (DELETE /events/{id}/documents/{document_id})
	DeleteEventsIdDocumentsDocumentId(ctx echo.Context, id Id, documentId DocumentId) error
	// イベント資料
	// (GET /events/{id}/documents/{document_id})
	GetEventsIdDocumentsDocumentId(ctx echo.Context, id Id, documentId DocumentId) error
	// イベント資料変更
	// (PATCH /events/{id}/documents/{document_id})
	PatchEventsIdDocumentsDocumentId(ctx echo.Context, id Id, documentId DocumentId) error
	// migration
	// (POST /reset)
	PostReset(ctx echo.Context) error
	// ユーザー削除
	// (DELETE /users)
	DeleteUsers(ctx echo.Context) error
	// ユーザー一覧
	// (GET /users)
	GetUsers(ctx echo.Context) error
	// ユーザー登録
	// (POST /users)
	PostUsers(ctx echo.Context) error
	// サインイン
	// (POST /users/sign_in)
	PostUsersSignIn(ctx echo.Context) error
	// ユーザー削除
	// (DELETE /users/{id})
	DeleteUsersId(ctx echo.Context, id Id) error
	// ユーザー詳細
	// (GET /users/{id})
	GetUsersId(ctx echo.Context, id Id) error
	// ユーザー情報変更
	// (PATCH /users/{id})
	PatchUsersId(ctx echo.Context, id Id) error
	// ユーザーにスターを付ける
	// (POST /users/{id}/star)
	PostUsersIdStar(ctx echo.Context, id Id) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetEvents(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEventsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "name_contain" -------------

	err = runtime.BindQueryParameter("form", true, false, "name_contain", ctx.QueryParams(), &params.NameContain)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name_contain: %s", err))
	}

	// ------------- Optional query parameter "location" -------------

	err = runtime.BindQueryParameter("form", true, false, "location", ctx.QueryParams(), &params.Location)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter location: %s", err))
	}

	// ------------- Optional query parameter "location_contain" -------------

	err = runtime.BindQueryParameter("form", true, false, "location_contain", ctx.QueryParams(), &params.LocationContain)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter location_contain: %s", err))
	}

	// ------------- Optional query parameter "embed" -------------

	err = runtime.BindQueryParameter("form", true, false, "embed", ctx.QueryParams(), &params.Embed)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter embed: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEvents(ctx, params)
	return err
}

// PostEvents converts echo context to params.
func (w *ServerInterfaceWrapper) PostEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEvents(ctx)
	return err
}

// DeleteEventsId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEventsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteEventsId(ctx, id)
	return err
}

// GetEventsId converts echo context to params.
func (w *ServerInterfaceWrapper) GetEventsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEventsIdParams
	// ------------- Optional query parameter "embed" -------------

	err = runtime.BindQueryParameter("form", true, false, "embed", ctx.QueryParams(), &params.Embed)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter embed: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEventsId(ctx, id, params)
	return err
}

// PatchEventsId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchEventsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchEventsId(ctx, id)
	return err
}

// GetEventsIdDocuments converts echo context to params.
func (w *ServerInterfaceWrapper) GetEventsIdDocuments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEventsIdDocumentsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "name_contain" -------------

	err = runtime.BindQueryParameter("form", true, false, "name_contain", ctx.QueryParams(), &params.NameContain)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name_contain: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEventsIdDocuments(ctx, id, params)
	return err
}

// PostEventsIdDocuments converts echo context to params.
func (w *ServerInterfaceWrapper) PostEventsIdDocuments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEventsIdDocuments(ctx, id)
	return err
}

// DeleteEventsIdDocumentsDocumentId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEventsIdDocumentsDocumentId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "document_id" -------------
	var documentId DocumentId

	err = runtime.BindStyledParameterWithLocation("simple", false, "document_id", runtime.ParamLocationPath, ctx.Param("document_id"), &documentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter document_id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteEventsIdDocumentsDocumentId(ctx, id, documentId)
	return err
}

// GetEventsIdDocumentsDocumentId converts echo context to params.
func (w *ServerInterfaceWrapper) GetEventsIdDocumentsDocumentId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "document_id" -------------
	var documentId DocumentId

	err = runtime.BindStyledParameterWithLocation("simple", false, "document_id", runtime.ParamLocationPath, ctx.Param("document_id"), &documentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter document_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEventsIdDocumentsDocumentId(ctx, id, documentId)
	return err
}

// PatchEventsIdDocumentsDocumentId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchEventsIdDocumentsDocumentId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "document_id" -------------
	var documentId DocumentId

	err = runtime.BindStyledParameterWithLocation("simple", false, "document_id", runtime.ParamLocationPath, ctx.Param("document_id"), &documentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter document_id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchEventsIdDocumentsDocumentId(ctx, id, documentId)
	return err
}

// PostReset converts echo context to params.
func (w *ServerInterfaceWrapper) PostReset(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostReset(ctx)
	return err
}

// DeleteUsers converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsers(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsers(ctx)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsers(ctx)
	return err
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// PostUsersSignIn converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersSignIn(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsersSignIn(ctx)
	return err
}

// DeleteUsersId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersId(ctx, id)
	return err
}

// GetUsersId converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersId(ctx, id)
	return err
}

// PatchUsersId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchUsersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchUsersId(ctx, id)
	return err
}

// PostUsersIdStar converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersIdStar(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsersIdStar(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/events", wrapper.GetEvents)
	router.POST(baseURL+"/events", wrapper.PostEvents)
	router.DELETE(baseURL+"/events/:id", wrapper.DeleteEventsId)
	router.GET(baseURL+"/events/:id", wrapper.GetEventsId)
	router.PATCH(baseURL+"/events/:id", wrapper.PatchEventsId)
	router.GET(baseURL+"/events/:id/documents", wrapper.GetEventsIdDocuments)
	router.POST(baseURL+"/events/:id/documents", wrapper.PostEventsIdDocuments)
	router.DELETE(baseURL+"/events/:id/documents/:document_id", wrapper.DeleteEventsIdDocumentsDocumentId)
	router.GET(baseURL+"/events/:id/documents/:document_id", wrapper.GetEventsIdDocumentsDocumentId)
	router.PATCH(baseURL+"/events/:id/documents/:document_id", wrapper.PatchEventsIdDocumentsDocumentId)
	router.POST(baseURL+"/reset", wrapper.PostReset)
	router.DELETE(baseURL+"/users", wrapper.DeleteUsers)
	router.GET(baseURL+"/users", wrapper.GetUsers)
	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.POST(baseURL+"/users/sign_in", wrapper.PostUsersSignIn)
	router.DELETE(baseURL+"/users/:id", wrapper.DeleteUsersId)
	router.GET(baseURL+"/users/:id", wrapper.GetUsersId)
	router.PATCH(baseURL+"/users/:id", wrapper.PatchUsersId)
	router.POST(baseURL+"/users/:id/star", wrapper.PostUsersIdStar)

}
